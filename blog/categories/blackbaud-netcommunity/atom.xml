<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blackbaud NetCommunity | Spenser Jones]]></title>
  <link href="http://SpenserJ.github.io/blog/categories/blackbaud-netcommunity/atom.xml" rel="self"/>
  <link href="http://SpenserJ.github.io/"/>
  <updated>2013-07-14T13:11:55-06:00</updated>
  <id>http://SpenserJ.github.io/</id>
  <author>
    <name><![CDATA[Spenser Jones]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixing the Blackbaud NetCommunity Login Form]]></title>
    <link href="http://SpenserJ.github.io/blog/2011/04/14/fixing-the-blackbaud-netcommunity-login-form/"/>
    <updated>2011-04-14T12:52:00-06:00</updated>
    <id>http://SpenserJ.github.io/blog/2011/04/14/fixing-the-blackbaud-netcommunity-login-form</id>
    <content type="html"><![CDATA[<p>Blackbaud NetCommunity 6.15 has a bug in the login form, where tabbing onto the &ldquo;Remember Me&rdquo; field and pressing enter (normal functionality to submit a form) will take you back to the login form, with your username filled in, but no password or error. This is due to the fact that javascript is being (poorly) added directly to the HTML tags, instead of writing a simple, unobtrusive javascript function, that targets all fields on the form.</p>

<p>To remedy this, add a JS file to any layout that may contain a login field, and add this code:</p>

<p>``` javascript
$(function() {
  if (($loginForm = $(&lsquo;.LoginFormTable&rsquo;)).length &gt; 0) {</p>

<pre><code>$('input[type!=submit]', $loginForm).keypress(function(e) {
  if ((e.which &amp;amp;&amp;amp; e.which == 13) || (e.keyCode &amp;amp;&amp;amp; event.ke == 13)) {
    $('input[type=submit]', $loginForm).click();
    return false;
  } else { return true; }
});
</code></pre>

<p>  }
});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding iFrames to Blackbaud NetCommunity <= 6.15.70]]></title>
    <link href="http://SpenserJ.github.io/blog/2011/03/25/adding-iframes-to-blackbaud-netcommunity/"/>
    <updated>2011-03-25T12:47:00-06:00</updated>
    <id>http://SpenserJ.github.io/blog/2011/03/25/adding-iframes-to-blackbaud-netcommunity</id>
    <content type="html"><![CDATA[<p>Version 6.15 of Blackbaud NetCommunity consisted of many large changes to how BBNC works, one of which was the editor. In this update, Blackbaud moved from BBCuteEditor to TinyMCE (a great decision IMO, as TinyMCE is one of the most popular WYSIWYG editors). Sadly, patch 70 and below do not support iFrames, even if you have the iFrame set as a &ldquo;Safe HTML Tag&rdquo; in the settings. Blackbaud is working on a patch for this (patch 71 to be exact), however they do not have an ETA for it yet.</p>

<!-- more -->


<p>We have always had maps embedded in our website, to help visitors find us, and we recently decided to also embed a few YouTube videos. Due to the change in 6.15 however, we could no longer do so, and I went on a hunt to find the key to the iFrame kingdom. After using the find-in-file feature of Windows, and coming up short on anything, I wrote a quick little script to rewrite the editor initialization code, remove existing editors, and reinitialize them, with the iframe allowed. It wasn&rsquo;t the most elegant solution, however it worked for the interm, as I waited for Blackbaud to release P71. While implementing it however, I stumbled across the original initialization code, and instantly threw what I had written out.</p>

<p>Since it took a while for me to find this, I figure it may come in handy for anyone else that needs to add iFrames to TinyMCE in Blackbaud NetCommunity, or for anyone wanting to tweak the editor in the future.</p>

<p>The file that you&rsquo;ll want to edit is <code>{NetCommunity}/admin/HTMLEditorControl2.ascx</code>. For adding iFrames to the valid elements, I changed:</p>

<p><code>plain
&lt;appfx:HtmlEditorSetting Name="extended_valid_elements" Value="'style[dir&amp;lt;ltr?rtl|lang|media|title|type]
</code></p>

<p>to:</p>

<p><code>plain
&lt;appfx:HtmlEditorSetting Name="extended_valid_elements" Value="'iframe[src|width|height|name|align],style[dir&amp;lt;ltr?rtl|lang|media|title|type]
</code></p>

<p>Save the file, and refresh the editor, and you should now be able to insert iFrames into your page. Through this file, you can also change the theme that is used, disable certain toolbar buttons, and adjust anything else that is in the <a href="http://tinymce.moxiecode.com/wiki.php/Configuration">TinyMCE Configuration</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Blackbaud NetCommunity Custom Part]]></title>
    <link href="http://SpenserJ.github.io/blog/2011/02/23/creating-a-blackbaud-netcommunity-custom-part/"/>
    <updated>2011-02-23T18:32:00-07:00</updated>
    <id>http://SpenserJ.github.io/blog/2011/02/23/creating-a-blackbaud-netcommunity-custom-part</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been given the task of creating some custom plugins for NetCommunity, so we can do things like unify the design of our Faculty Biography pages at Ambrose. I have prior experience with C#, so I figured it would be a fairly simple process, once I figured out how their API works, however there is minimal documentation, and all of the tutorials online are either outdated or incomplete.</p>

<p>As such, I am going to write up a concise walkthrough for creating a NetCommunity plugin (for 6.15) using C#, from scratch, up until you have a functional part.</p>

<!-- more -->


<p>Begin by creating a new &ldquo;ASP.NET Empty Web Application&rdquo; project in Microsoft Visual Web Developer (<a href="http://cl.ly/4nce">http://cl.ly/4nce</a>). Right click on References, in the Solution Explorer, and choose Add Reference. Under the Browse tab, navigate to the Bin folder of your NetCommunity installation, and choose <code>BBNCExtensions.dll</code> (<a href="http://cl.ly/4nOt">http://cl.ly/4nOt</a>). Finally, go into the Project menu, and click <code>{ProjectName} properties</code>, and change Target framework to <code>.NET Framework 3.5</code> (under the application tab). You&rsquo;re now ready to start coding some basic functionality into your application.</p>

<p>Right click on your project in the Solution Explorer (should be the bold title at the very top), and choose <code>Add-&gt;New Item</code>. You will want to create two new <code>Web User Controls</code> named <code>Display.ascx</code> and <code>Editor.ascx</code> (<a href="http://cl.ly/4n69">http://cl.ly/4n69</a>). In Display.ascx.cs and Editor.ascx.cs, add the following &ldquo;using&rdquo; statements:</p>

<p><code>c# Display.ascx.cs and Editor.ascx.cs
using BBNCExtensions;
using BBNCExtensions.Parts;
</code></p>

<p>Then, in <code>Display.ascx.cs</code>, change <code>System.WebUI.UserControl</code> (the class to inherit from) to <code>BBNCExtensions.Parts.CustomPartDisplayBase</code>. In <code>Editor.ascx.cs</code>, you&rsquo;ll want to change <code>System.WebUI.UserControl</code> to <code>BBNCExtensions.Parts.CustomPartEditorBase</code>. You&rsquo;ll also want to add two functions, as follow:</p>

<p>``` c# Display.ascx.cs
public override void OnLoadContent() {</p>

<p>}</p>

<p>public override bool OnSaveContent(bool bDialogIsClosing){</p>

<pre><code>return true;
</code></pre>

<p>}
```</p>

<p>Your plugin is now finished, and it is time to build it, and set it up in NetCommunity. Click build, and copy <code>bin/{ProjectName}.dll</code> to <code>{NetCommunityInstall}/Bin</code>, and copy <code>Display.ascx</code> and <code>Editor.ascx</code> (from the project root) to <code>{NetCommunityInstall}/Custom/{ProjectName}/</code>. Then open up the Custom Part settings page in NetCommunity, click <code>New custom part</code>, and give your part a name. For Display/Edit Control Source, enter <code>~\Custom\{ProjectName}\{Display|Editor}.ascx</code> (depending on which field you&rsquo;re changing), and leave <code>Supports Personalization for</code> set to <code>Not Supported</code>.</p>

<p>Save the custom part, and try creating a part, and you should see a blank editor page, and a blank display page (after you save it). Your NetCommunity plugin is now built, so give yourself a pat on the back, take a quick break, and then we&rsquo;ll add some basic functionality.</p>

<p>Every change you make will require that you update either the DLL, the ascx files, or both (depending on what you change), so lets automate that with some build events. Click the Project Menu, and then <code>{ProjectName} Properties</code>. Open the Build Events tab, and edit the Post-build event so that it reads (with obvious path adjustments):</p>

<p><code>plain
copy "$(ProjectDir)*.ascx"  "c:\Program Files\Blackbaud\NetCommunity\Custom\$(ProjectName)"
copy "$(TargetDir)$(ProjectName).dll" "c:\Program Files\Blackbaud\NetCommunity\Bin"
</code></p>

<p>Click build, and you should see it automatically copy the three files into their appropriate directories.</p>

<p>Now to bring the plugin to life, and add some actual functionality. Right click on your project in the Solution Explorer, and choose <code>Add-&gt;Class</code>. Name it something appropriate, as this class will hold the settings for this part. Inside of the class declaration, add a public variable for every property of the part (e.g. public string name = &ldquo;&rdquo;;).</p>

<p>Open <code>Editor.ascx</code> in design mode, and add a text field (you can add labels and formatting whenever you please) for each property that you want to make editable, and set the ID to match the property name. I chose to prefix each with &ldquo;field&rdquo; to make it easier to find, which resulted in things like &ldquo;fieldEducation&rdquo; as an ID, but as long as you can keep track of each property, you can name it any proper variable name.</p>

<p>Then, go back to <code>Editor.ascx.cs</code>, and in your <code>OnSaveContent</code> function, add the following (adjusting as necessary). I&rsquo;m going to use property_class, but replace that with whatever you named the class you created above (containing your property declarations):</p>

<p><code>c# Editor.ascx.cs - OnSaveContent
// Lets create an empty property_class variable, to save our data
property_class save_data = new property_class();
// For each property that you have, add a line similar to this
save_data.education = fieldEducation.Text;
// Now lets save all of those properties to the part
base.Content.SaveContent(save_data);
// Finally, let the browser know that everything worked, and let the window close
// When you add validation, return false if you find an error
return true;
</code></p>

<p>While still in <code>Editor.ascx.cs</code>, add the following to <code>OnLoadContent</code>, again modifying it as needed:</p>

<p>``` c# Editor.ascx.cs &ndash; OnLoadContent
// Check if we&rsquo;re not updating the data (e.g. we just opened the editor)
if (Request.RequestType != &ldquo;POST&rdquo;)
{</p>

<pre><code>// Load the content from our part, as property_class
property_class get_data = base.Content.GetContent(typeof(property_class)) as property_class;
// If get_data is null, this is a brand new part. If it isn't null, lets set our fields to the data
if (get_data != null)
{
    // Add a line like this for every property in property_class
    fieldEducation.Text = get_data.education;
}
</code></pre>

<p>}
```</p>

<p>If you build the part, and try it in NetCommunity at this point, you&rsquo;ll find that you can create and edit the part, and it will retain your changes, however it doesn&rsquo;t display your changes anywhere. To add that in, open up <code>Display.ascx</code> in design mode, and add Literal tags to your code, again, setting the ID to something logical. Then open up <code>Display.ascx.cs</code>, and add the following to your <code>Page_Load</code> function, as usual, editing it where needed:</p>

<p>``` c# Display.ascx &ndash; Page_Load
// Load the content from our part, as property_class
property_class get_data = base.Content.GetContent(typeof(property_class)) as property_class;
// Has this part been saved before?
if (get_data != null)
{</p>

<pre><code>// Add a line like this for every property in property_class
fieldEducation.Text = get_data.education;
</code></pre>

<p>}
```</p>

<p>If you save and build your part again, you&rsquo;ll see that your properties are now being displayed as well. Congratulations on successfully building your first Blackbaud NetCommunity Custom Part.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Locking down Blackbaud NetCommunity content authoring]]></title>
    <link href="http://SpenserJ.github.io/blog/2010/12/20/locking-down-blackbaud-netcommunity-content-authoring/"/>
    <updated>2010-12-20T18:21:00-07:00</updated>
    <id>http://SpenserJ.github.io/blog/2010/12/20/locking-down-blackbaud-netcommunity-content-authoring</id>
    <content type="html"><![CDATA[<p>At Ambrose University College, we run Blackbaud NetCommunity as our CMS, and I&rsquo;ve encountered a few issues with permissions for content authors, and how the editor itself works. Over the past few weeks, in an attempt to improve the experience of both our visitors, and our content authors, I have added a few lines to our website&rsquo;s javascript file (hosted in a document part).</p>

<p>One issue we have run into is that Internet Explorer does not play nice with our CSS3 box shadows (using CSS3Pie), and will save the progressive enhancements that are loaded specifically for IE, as part of the page and/or part, for all browsers. This results in pages that have been edited using IE, showing two box shadows in CSS3 compliant browsers, and only one in IE. Since IE is to blame (and has issues with other parts of the editor), I decided to kill off support for using IE when in administration mode.</p>

<!-- more -->


<p>While I was working on my IE-proofing, one of our content authors accidentally clicked the &ldquo;Template Designer&rdquo; button, which resulted in her inserting a part on every page on the website. This is not the first time we have encountered this issue, and last time it happened, it took about two hours to fix, as changes were also made to the HTML of the template. Two lines of javascript later, and the Stylesheet editor and Template Designer buttons no longer appear. If I need to make changes, I can always go through the page finder, but changes are so infrequent that having a front-and-center button is just asking for trouble.</p>

<p>Incase you would like to implement similar &ldquo;fixes&rdquo; on your NetCommunity website, I have the code for 6.10 posted below :)</p>

<p>``` javascript NetCommunity 6.10
$(function() {
  var $adminMenu = $(&lsquo;#bbAdminMenuDiv&rsquo;, top.document);
  var ieDisabledMessage = &lsquo;In order to edit the Ambrose website, please use Firefox. IE support has been disabled due to compatibility issues.&rsquo;;
  if ($.browser.msie &amp;&amp; $adminMenu.length > 0) {</p>

<pre><code>$('div, table, a', $adminMenu).remove();
$adminMenu.append(ieDisabledMessage);
</code></pre>

<p>  }</p>

<p>  if (top.document.location.href.indexOf(&lsquo;/AdminPage.aspx&rsquo;) > -1) {</p>

<pre><code>$('#pagecntnt_AdminToolbar_btn2, #pagecntnt_AdminToolbar_btn3', top.document).remove();
if ($.browser.msie) { $('#pagecntnt_divContentPane', top.document).html(ieDisabledMessage); }
</code></pre>

<p>  }
});
```</p>

<p><em>As of December 22nd, we have upgraded to 6.15, and the administration menu and screens have changed. As such, I have rewritten the code, and it is also posted below</em></p>

<p>``` javascript NetCommunity 6.15
$(function() {
  var $adminMenu = $(&lsquo;#ctl05_bbBetaAdminMenuDiv&rsquo;, top.document);
  var ieDisabledMessage = &lsquo;In order to edit the Ambrose website, please use Firefox. IE support has been disabled due to compatibility issues.&rsquo;;
  if ($.browser.msie &amp;&amp; $adminMenu.length > 0) {</p>

<pre><code>$('ul.bb_mainMenu li:gt(0), .bb_subMenu', $adminMenu).remove();
$('li:first', $adminMenu).html('&lt;h2 style="padding: 0px 12px;"&gt;' + ieDisabledMessage + '&lt;/h2&gt;');
</code></pre>

<p>  }</p>

<p>  if (top.document.location.href.indexOf(&lsquo;ambrose.edu/cms/&rsquo;) > -1) {</p>

<pre><code>$('#pagecntnt_AdminToolbar_btn1lnk, #pagecntnt_AdminToolbar_btn2lnk', top.document).remove();
if ($.browser.msie) { $('#divPage', top.document).css('color','#fff').html(ieDisabledMessage); }
</code></pre>

<p>  }
});
```</p>
]]></content>
  </entry>
  
</feed>
