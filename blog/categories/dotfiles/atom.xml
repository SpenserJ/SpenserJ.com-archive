<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dotfiles | Spenser Jones]]></title>
  <link href="http://spenserj.com/blog/categories/dotfiles/atom.xml" rel="self"/>
  <link href="http://spenserj.com/"/>
  <updated>2013-12-26T22:56:40-07:00</updated>
  <id>http://spenserj.com/</id>
  <author>
    <name><![CDATA[Spenser Jones]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing tmux in CentOS]]></title>
    <link href="http://spenserj.com/blog/2013/11/11/installing-tmux-in-centos/"/>
    <updated>2013-11-11T11:53:00-07:00</updated>
    <id>http://spenserj.com/blog/2013/11/11/installing-tmux-in-centos</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently started a job at <a href="http://simplesimple.ca/">Simple Simple Advertising</a>, and have spent my first week optimizing servers and configuring proper dev environments, all of which are CentOS. While CentOS is a rock-solid OS, I&rsquo;m not particularly fond of the 100% binary compatibility concept, since I don&rsquo;t try to run 100% of the available software on a single server, and test my stacks before they reach production. I&rsquo;m far more interested in having semi-recent packages with security fixes, and tools that make my life easier. Tools like my <a href="http://spenserj.com/blog/2013/11/11/dotfiles-a-home-away-from-home/">Dotfiles</a> and the configurations that they contain, along with tmux and Zsh for managing multiple windows within a single ssh connection. Sadly, CentOS' version of Tmux does not work. More specifically, tmux won&rsquo;t start with the Zsh config I&rsquo;ve built, so I built a more recent version from source.</p>

<!-- more -->


<h2>Dependencies</h2>

<pre><code>$ sudo yum install gcc make automake pkgconfig wget git-core ncurses-devel
$ mkdir ~/src
</code></pre>

<h2>LibEvent</h2>

<p>Tmux relies on LibEvent, which I could also <code>yum install</code>, but the version has been pinned there as well. Since I&rsquo;m running x64, we&rsquo;ll have to symlink it to the <code>/usr/lib64</code> folder after install.</p>

<pre><code>$ cd ~/src
$ wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz
$ tar -zxvf libevent-2.0.21-stable.tar.gz
$ cd libevent-2.0.21-stable
$ ./configure
$ make
$ sudo make install
$ sudo ln -s /usr/local/lib/libevent-2.0.so.5 /usr/lib64
</code></pre>

<h2>Tmux</h2>

<p>Now that we&rsquo;re set up with dependencies for tmux, clone the repository and build it.</p>

<pre><code>$ cd ~/src
$ git clone git://git.code.sf.net/p/tmux/tmux-code
$ cd tmux-code
$ sh autogen.sh
$ ./configure
$ make
$ sudo make install
</code></pre>

<p>Now you have a recent version of tmux that works properly with Zsh+<a href="https://github.com/sorin-ionescu/prezto">Prezto</a>.  It&rsquo;s good to be <code>~/</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dotfiles - A ~/ away from ~/]]></title>
    <link href="http://spenserj.com/blog/2013/11/11/dotfiles-a-home-away-from-home/"/>
    <updated>2013-11-11T11:45:00-07:00</updated>
    <id>http://spenserj.com/blog/2013/11/11/dotfiles-a-home-away-from-home</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve built out a nice little environment for myself, that I bring to each server I&rsquo;m regularly working on through the use of <a href="https://github.com/SpenserJ/dotfiles">Dotfiles</a>. At its core, Zsh provides an attractive and helpful prompt, while Tmux provides panes, windows, and session resumption. There are Vim and Irssi configs as well, since I make heavy use of both.</p>

<p>The process of bringing an entire repository of config files to a new server, and then keeping all (1, 5, 10, 100) servers' configs in sync is a daunting task. Thankfully, there are tools that exist to handle the heavy lifting, and setting up your environment takes just a few minutes.</p>

<!-- more -->


<h2>Dependencies</h2>

<p>The configuration I&rsquo;ve built out relies on Zsh and Tmux, but you can choose to build an environment with something else, or just with a plain ol' bash prompt if you wish.</p>

<pre><code>$ sudo apt-get install git-core zsh tmux
</code></pre>

<h2>Homeshick</h2>

<p><a href="https://github.com/technicalpickles/homesick">Homesick</a> is a Ruby Gem that simplifies the process of using Git Repositories for tracking your configuration files. The majority of servers that I work on have no need for Ruby, and I can&rsquo;t justify installing it just for my dotfiles, so I went looking for an alternative. Aanders Ingemann has developed a version written entirely in Bash, called <a href="https://github.com/andsens/homeshick">Homeshick</a>.</p>

<pre><code>$ git clone git://github.com/andsens/homeshick.git $HOME/.homesick/repos/homeshick
</code></pre>

<h2>Dotfiles</h2>

<p>Now that we&rsquo;ve installed Homeshick (yes, it really was that simple), we can go ahead and clone down a Dotfiles repository. At the end of the clone, Homeshick will ask if you want to symlink it, which will replace any existing configs with a link to our Dotfiles repository configs. Go ahead and say yes, and handle any conflicts as you deem appropriate.</p>

<pre><code>$ ~/.homesick/repos/homeshick/bin/homeshick clone SpenserJ/dotfiles
</code></pre>

<h2>Zsh + Tmux</h2>

<p>Great! We have Homeshick (which I&rsquo;ve aliased as Homesick), and we have the Dotfiles. If you were to reconnect right now, you wouldn&rsquo;t have full functionality though, as our <code>$SHELL</code> isn&rsquo;t set to Zsh yet. And since Zsh controls Tmux, you would have a very underwhelming experience with dotfiles. Change your shell, and then connect (in another window, just to be safe), and you should see a bar across the bottom, and a new prompt.</p>

<pre><code>$ chsh `whoami` -s `which zsh`
</code></pre>

<h2>Changing your dotfiles</h2>

<p>You&rsquo;re probably going to make some changes to your dotfiles over the next few months, and you&rsquo;ll want to keep those changes backed up and synchronized across all of your servers. Homesick/Homeshick make this extremely easy to do so.</p>

<pre><code># Track a new file
$ homeshick track dotfiles ~/.vimrc

# Commit your changes
$ cd ~/.homesick/repos/dotfiles
$ git add home/.vimrc
$ git commit -m 'Using Solarized Light'
$ git push

# Updating your dotfiles on another server
$ homeshick pull dotfiles
</code></pre>
]]></content>
  </entry>
  
</feed>
