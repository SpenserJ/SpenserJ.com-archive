<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Server Administration | Spenser Jones]]></title>
  <link href="http://spenserj.com/blog/categories/server-administration/atom.xml" rel="self"/>
  <link href="http://spenserj.com/"/>
  <updated>2013-07-19T16:55:53-06:00</updated>
  <id>http://spenserj.com/</id>
  <author>
    <name><![CDATA[Spenser Jones]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Securing a Linux Server]]></title>
    <link href="http://spenserj.com/blog/2013/07/15/securing-a-linux-server/"/>
    <updated>2013-07-15T10:52:00-06:00</updated>
    <id>http://spenserj.com/blog/2013/07/15/securing-a-linux-server</id>
    <content type="html"><![CDATA[<p>It is a rare to watch someone secure a freshly installed server right off the bat, yet the world we live in makes this a necessity. So why do so many people put it off until the end, if at all? I&rsquo;ve done the exact same thing, and it often comes down to wanting to get right into the fun stuff. Hopefully this post will show that it is far easier than you think to secure a server, and can be quite entertaining to look down from your fortress, when the attacks begin to flow.</p>

<p>This post is written for Ubuntu 12.04.2 LTS, however you can do similar things on any other Linux distribution.</p>

<!-- more -->


<h2>Where do I begin?</h2>

<p>If this server already has a public IP, you&rsquo;ll want to lock down root access immediately. In fact, you&rsquo;ll want to lock down SSH access entirely, and make sure that only <em>you</em> can get in. Add a new user, and add it to an admin group (preconfigured in <code>/etc/sudoers</code> to have access to <code>sudo</code>).</p>

<p>``` plain
$ sudo addgroup admin
Adding group &lsquo;admin&rsquo; (GID 1001)
Done.</p>

<p>$ sudo adduser spenserj
Adding user <code>spenserj' ...
Adding new group</code>spenserj' (1002) &hellip;
Adding new user <code>spenserj' (1001) with group</code>spenserj' &hellip;
Creating home directory <code>/home/spenserj' ...
Copying files from</code>/etc/skel' &hellip;
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
Changing the user information for spenserj
Enter the new value, or press ENTER for the default</p>

<pre><code>Full Name []: Spenser Jones
Room Number []:
Work Phone []:
Home Phone []:
Other []:
</code></pre>

<p>Is the information correct? [Y/n] y</p>

<p>$ sudo usermod -a -G admin spenserj
```</p>

<p>Youâ€™ll also want to create a private key on your computer, and disable that pesky password authentication on the server.</p>

<p><code>plain
$ mkdir ~/.ssh
$ echo "ssh-rsa [your public key]" &gt; ~/.ssh/authorized_keys
</code></p>

<p><code>plain /etc/ssh/sshd_config
PermitRootLogin no
PermitEmptyPasswords no
PasswordAuthentication no
AllowUsers spenserj
</code></p>

<p>Reload SSH to apply the changes, and then try logging in <strong>in a new session</strong> to ensure everything worked. If you can&rsquo;t log in, you&rsquo;ll still have your original session to fix things up.</p>

<p><code>plain
$ sudo service ssh restart
ssh stop/waiting
ssh start/running, process 1599
</code></p>

<h2>Update the server</h2>

<p>Now that you&rsquo;re the only one with access to the server, you can stop worrying about a hacker sneaking in, and breathe normally again. Chances are good that there are some updates for your server, so go ahead and run those now.</p>

<p>``` plain
$ sudo apt-get update
&hellip;
Hit <a href="http://ca.archive.ubuntu.com">http://ca.archive.ubuntu.com</a> precise-updates/universe Translation-en_CA
Hit <a href="http://ca.archive.ubuntu.com">http://ca.archive.ubuntu.com</a> precise-updates/universe Translation-en
Hit <a href="http://ca.archive.ubuntu.com">http://ca.archive.ubuntu.com</a> precise-backports/main Translation-en
Hit <a href="http://ca.archive.ubuntu.com">http://ca.archive.ubuntu.com</a> precise-backports/multiverse Translation-en
Hit <a href="http://ca.archive.ubuntu.com">http://ca.archive.ubuntu.com</a> precise-backports/restricted Translation-en
Hit <a href="http://ca.archive.ubuntu.com">http://ca.archive.ubuntu.com</a> precise-backports/universe Translation-en
Fetched 3,285 kB in 5s (573 kB/s)
Reading package lists&hellip; Done</p>

<p>$ sudo apt-get upgrade
Reading package lists&hellip; Done
Building dependency tree
Reading state information&hellip; Done
The following packages have been kept back:
  linux-headers-generic-lts-quantal linux-image-generic-lts-quantal
The following packages will be upgraded:
  accountsservice apport apt apt-transport-https apt-utils aptitude bash &hellip;
73 upgraded, 0 newly installed, 0 to remove and 2 not upgraded.
Need to get 61.0 MB of archives.
After this operation, 151 kB of additional disk space will be used.
Do you want to continue [Y/n]? Y
&hellip;
Setting up libisc83 (1:9.8.1.dfsg.P1-4ubuntu0.6) &hellip;
Setting up libdns81 (1:9.8.1.dfsg.P1-4ubuntu0.6) &hellip;
Setting up libisccc80 (1:9.8.1.dfsg.P1-4ubuntu0.6) &hellip;
Setting up libisccfg82 (1:9.8.1.dfsg.P1-4ubuntu0.6) &hellip;
Setting up libbind9-80 (1:9.8.1.dfsg.P1-4ubuntu0.6) &hellip;
Setting up liblwres80 (1:9.8.1.dfsg.P1-4ubuntu0.6) &hellip;
Setting up bind9-host (1:9.8.1.dfsg.P1-4ubuntu0.6) &hellip;
Setting up dnsutils (1:9.8.1.dfsg.P1-4ubuntu0.6) &hellip;
Setting up iptables (1.4.12-1ubuntu5) &hellip;
&hellip;
```</p>

<h2>Install a Firewall</h2>

<p>Running the most recent software now? Good. Go ahead and set up a firewall, and <em>only</em> allow what you need right at this moment. You can always add another exception later, and a few minutes of extra work won&rsquo;t kill you. IPTables comes preinstalled in Ubuntu, so go ahead and set up some rules for it.</p>

<p><code>plain
$ sudo mkdir /etc/iptables
</code></p>

<p>``` plain /etc/iptables/rules
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]</p>

<h1>Accept any related or established connections</h1>

<p>-I INPUT  1 -m state &mdash;state RELATED,ESTABLISHED -j ACCEPT
-I OUTPUT 1 -m state &mdash;state RELATED,ESTABLISHED -j ACCEPT</p>

<h1>Allow all traffic on the loopback interface</h1>

<p>-A INPUT  -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT</p>

<h1>Allow outbound DHCP request &ndash; Some hosts (Linode) automatically assign the primary IP</h1>

<h1>-A OUTPUT -p udp &mdash;dport 67:68 &mdash;sport 67:68 -j ACCEPT</h1>

<h1>Outbound DNS lookups</h1>

<p>-A OUTPUT -o eth0 -p udp -m udp &mdash;dport 53 -j ACCEPT</p>

<h1>Outbound PING requests</h1>

<p>-A OUTPUT -p icmp -j ACCEPT</p>

<h1>Outbound Network Time Protocol (NTP) request</h1>

<p>-A OUTPUT -p udp &mdash;dport 123 &mdash;sport 123 -j ACCEPT</p>

<h1>SSH</h1>

<p>-A INPUT  -i eth0 -p tcp -m tcp &mdash;dport 22 -m state &mdash;state NEW -j ACCEPT</p>

<p>COMMIT
```</p>

<p>Auto-load the rules with the network, and apply them now.</p>

<p><code>plain
$ echo "#\!/bin/sh\niptables-restore &lt; /etc/iptables/rules" | sudo tee /etc/network/if-pre-up.d/iptables
$ sudo chmod +x /etc/network/if-pre-up.d/iptables
$ sudo /etc/network/if-pre-up.d/iptables
</code></p>

<h2>Fail2ban those wannabe-hackers</h2>

<p>Fail2ban is one of my favourite tools when it comes to security, as it will monitor your logfiles, and temporarily ban users that are misusing your resources, be it brute forcing your SSH connection, or DoSing your webserver.</p>

<p><code>plain Install Fail2ban
$ sudo apt-get install fail2ban
[sudo] password for sjones:
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following extra packages will be installed:
  gamin libgamin0 python-central python-gamin python-support whois
Suggested packages:
  mailx
The following NEW packages will be installed:
  fail2ban gamin libgamin0 python-central python-gamin python-support whois
0 upgraded, 7 newly installed, 0 to remove and 2 not upgraded.
Need to get 254 kB of archives.
After this operation, 1,381 kB of additional disk space will be used.
Do you want to continue [Y/n]? y
...
</code></p>

<p>Fail2ban installs a default configuration (<code>/etc/fail2ban/jail.conf</code>), but we&rsquo;ll want to make our changes in <code>/etc/fail2ban/jail.local</code>, so copy it there.</p>

<p><code>plain
sudo cp /etc/fail2ban/jail.{conf,local}
</code></p>

<h3>Configuration</h3>

<p>Change the <code>ignoreip</code> line to your IP, and decide on an amount of time to ban the scumbags for (default is 10 minutes). You&rsquo;ll also want to set up a <code>destemail</code>, which I normally enter as my own email address followed by <code>,fail2ban@blocklist.de</code>. <a href="http://www.blocklist.de/">BlockList.de</a> is a system to track and automatically report hacking attempts to the proper abuse contact for their IP.</p>

<p>``` plain /etc/fail2ban/jail.local
[DEFAULT]</p>

<h1>&ldquo;ignoreip&rdquo; can be an IP address, a CIDR mask or a DNS host</h1>

<p>ignoreip = 127.0.0.1/8
bantime  = 600
maxretry = 3</p>

<h1>&ldquo;backend&rdquo; specifies the backend used to get files modification. Available</h1>

<h1>options are &ldquo;gamin&rdquo;, &ldquo;polling&rdquo; and &ldquo;auto&rdquo;.</h1>

<h1>yoh: For some reason Debian shipped python-gamin didn&rsquo;t work as expected</h1>

<h1>This issue left ToDo, so polling is default backend for now</h1>

<p>backend = auto</p>

<p>#</p>

<h1>Destination email address used solely for the interpolations in</h1>

<h1>jail.{conf,local} configuration files.</h1>

<p>destemail = root@localhost,<a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#x66;&#x61;&#x69;&#x6c;&#x32;&#x62;&#97;&#x6e;&#x40;&#98;&#108;&#111;&#99;&#107;&#x6c;&#105;&#115;&#x74;&#x2e;&#x64;&#101;">&#x66;&#97;&#x69;&#x6c;&#x32;&#x62;&#97;&#110;&#x40;&#98;&#x6c;&#111;&#x63;&#107;&#108;&#105;&#115;&#x74;&#x2e;&#100;&#101;</a>
```</p>

<p>There are a few other settings you&rsquo;ll want to check out, although the defaults are quite sufficient, so skim through the file quickly until you reach the Actions section.</p>

<h3>Actions</h3>

<p>Actions allow you to react to malicious activity, however the default is to issue an IPTables ban, while we want it to ban <em>and</em> send an email. Thankfully there is a preconfigured <code>action_wml</code>, which does just that.</p>

<p>``` plain /etc/fail2ban/jail.local</p>

<h1>Choose default action.  To change, just override value of &lsquo;action&rsquo; with the</h1>

<h1>interpolation to the chosen action shortcut (e.g.  action_mw, action_mwl, etc) in jail.local</h1>

<h1>globally (section [DEFAULT]) or per specific section</h1>

<p>action = %(action_mwl)s
```</p>

<h3>Jails</h3>

<p>In order for Fail2ban to work, it needs to know what to watch. These are configured in the Jails section of the config, and there are quite a few examples pre-loaded and disabled. Since you&rsquo;ve only enabled SSH access on the server so far, we&rsquo;ll only enable the SSH and SSH-DDoS jails, however you&rsquo;ll want to add a new jail for each publicly-accessible service that you install on this server.</p>

<p>``` plain /etc/fail2ban/jail.local
[ssh]</p>

<p>enabled  = true
port     = ssh
filter   = sshd
logpath  = /var/log/auth.log
maxretry = 6</p>

<p>[ssh-ddos]</p>

<p>enabled  = true
port     = ssh
filter   = sshd-ddos
logpath  = /var/log/auth.log
maxretry = 6
```</p>

<h3>Apply the changes</h3>

<p>Now that we&rsquo;ve configured Fail2ban, you&rsquo;ll want to reload it, and confirm that it is adding the appropriate rules to IPTables.</p>

<p>``` plain
$ sudo service fail2ban restart
 * Restarting authentication failure monitor fail2ban
   &hellip;done.</p>

<p>$ sudo iptables -L
Chain INPUT (policy DROP)
target     prot opt source               destination
fail2ban-ssh-ddos  tcp  &mdash;  anywhere             anywhere             multiport dports ssh
fail2ban-ssh  tcp  &mdash;  anywhere             anywhere             multiport dports ssh
&hellip;
Chain fail2ban-ssh (1 references)
target     prot opt source               destination
RETURN     all  &mdash;  anywhere             anywhere</p>

<p>Chain fail2ban-ssh-ddos (1 references)
target     prot opt source               destination
RETURN     all  &mdash;  anywhere             anywhere
```</p>

<p>At any time, you can use <code>sudo iptables -L</code> to list your rules, and subsequently list any currently-banned IPs. At the moment, Fail2ban is handling two malicious individuals:</p>

<p><code>plain Banned IPs
DROP       all  --  204.50.33.22         anywhere
DROP       all  --  195.128.126.114      anywhere
</code></p>

<h2>Staying on top of things</h2>

<p>You should now have a server that is locked down and ready to use, however this is not the end of your security journey. Stay on top of updates (and always test them in a non-production environment first), always close ports that you don&rsquo;t need, check your logs regularly, and know your servers inside-and-out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up NSD3 for DNS]]></title>
    <link href="http://spenserj.com/blog/2013/07/12/setting-up-nsd3-for-dns/"/>
    <updated>2013-07-12T11:31:00-06:00</updated>
    <id>http://spenserj.com/blog/2013/07/12/setting-up-nsd3-for-dns</id>
    <content type="html"><![CDATA[<p>There are two major players in the Domain Name System server market: <a href="https://www.isc.org/downloads/bind/">Bind</a> and <a href="https://www.nlnetlabs.nl/projects/nsd/">NSD</a>. The former has been around since the 1980s and makes up a majority of the installations in use today, while the latter saw its first release around the turn of the century, and is designed to be purely authoritative (incapable of recursive DNS queries). While selecting a DNS server for <a href="https://ambrose.edu">Ambrose University College</a>, NSD&rsquo;s ability to easily run from a Chroot, and its lightweight footprint (currently using 69MB of RAM for the entire server), easily won our vote. Furthermore, NSD can make use of BIND&rsquo;s zonefiles, and the migration from our old server was complete in a matter of minutes.</p>

<!-- more -->


<h2>Securing your server</h2>

<p>Before you even consider working on your DNS server, you&rsquo;ll want to lock down your security. What good is a server if you can&rsquo;t trust it? I&rsquo;ve written up a separate post on <a href="/blog/2013/07/15/securing-a-linux-server/">Securing a Linux Server</a> that should give you a head start.</p>

<h2>Install NSD</h2>

<p>NSD will start as soon as you install it, and complain if you don&rsquo;t have a config file created already, so we&rsquo;ll create a blank file for now.</p>

<p><code>plain
$ sudo mkdir /etc/nsd3
$ sudo touch /etc/nsd3/nsd.conf
$ sudo apt-get install nsd3
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  nsd3
0 upgraded, 1 newly installed, 0 to remove and 2 not upgraded.
Need to get 931 kB of archives.
After this operation, 1,672 kB of additional disk space will be used.
Get:1 http://ca.archive.ubuntu.com/ubuntu/ precise/universe nsd3 amd64 3.2.9-1 [931 kB]
Fetched 931 kB in 1s (491 kB/s)
Selecting previously unselected package nsd3.
(Reading database ... 49711 files and directories currently installed.)
Unpacking nsd3 (from .../nsd3_3.2.9-1_amd64.deb) ...
Processing triggers for ureadahead ...
Processing triggers for man-db ...
Setting up nsd3 (3.2.9-1) ...
grep: /etc/aliases: No such file or directory
 * Building nsd3 zones... [ OK ]
 * Starting nsd3...       [ OK ]
</code></p>

<h3>Give yourself access to <code>/etc/nsd3</code></h3>

<p>By default, you won&rsquo;t have access to <code>/etc/nsd3</code> without working as root, and running as root is bad form, so let&rsquo;s add the nsd group to our account. We probably have some kernel updates that need to be applied, and we need to relogin for the group to apply, so this is the perfect time to reboot our server as well.</p>

<p>``` plain
$ sudo usermod -a -G nsd spenserj
$ sudo reboot now
Broadcast message from spenserj@dnsmaster</p>

<pre><code>(/dev/pts/0) at 17:23 ...
</code></pre>

<p>The system is going down for reboot NOW!
```</p>

<h2>Configure NSD</h2>

<h3>Configure NSD as a Master</h3>

<p>You&rsquo;ll find a sample configuration at <code>/etc/nsd3/nsd.conf.sample</code>, and <a href="http://linux.die.net/man/5/nsd.conf">man nsd.conf</a> is a great place to find more information. The config is quite simplistic though, and I was un and running in minutes.</p>

<p>``` plain /etc/nsd3/nsd.conf
server:
  logfile: &ldquo;/var/log/nsd.log&rdquo;
  username: nsd
  hide-version: yes
  identity: &ldquo;ns1.ambrose.edu&rdquo;</p>

<h1>Primary ambrose.edu Forward Lookup Zone</h1>

<p>zone:
  name: ambrose.edu
  zonefile: forward/ambrose.edu.zone</p>

<p>  notify:      dnsslave1 NOKEY
  provide-xfr: dnsslave1 NOKEY</p>

<p>  notify:      dnsslave2 slave2key
  provide-xfr: dnsslave2 slave2key</p>

<h1>Shaw Reverse Lookup Zone</h1>

<p>zone:
  name: 237.244.66.in-addr.arpa
  zonefile: reverse/66.244.237.zone</p>

<p>  notify:      dnsslave1 NOKEY
  provide-xfr: dnsslave1 NOKEY</p>

<p>  notify:      dnsslave2 slave2key
  provide-xfr: dnsslave2 slave2key</p>

<p>key:
  name: slave2key
  algorithm: hmac-md5
  secret: &ldquo;95hP9OTvHID2jJO2GNaeuw==&rdquo;
```</p>

<p>You may be asking yourself &ldquo;But Spenser, how do I generate that key?&rdquo;, and thankfully the answer is quite simple.</p>

<p><code>plain
$ dd if=/dev/random bs=16 count=1 2&gt;/dev/null | openssl base64
NzmiUkU7zA/2rQ6nnjut3w==
</code></p>

<h3>Configure NSD as a Slave</h3>

<p>The slave configuration is nearly identical to the master, with the only change being the <code>notify</code> and <code>provide-xfr</code> lines changing to the slave-variant. Each zone is required to have a zonefile, but you don&rsquo;t need to fill it out if it pulls from the master, so I just touched each file and left it empty.</p>

<p>``` plain /etc/nsd3/nsd.conf
zone:
  name: ambrose.edu
  zonefile: forward/ambrose.edu.zone</p>

<p>  allow-notify:      dnsmaster NOKEY
  request-xfr:  AXFR dnsmaster NOKEY
```</p>

<h3>Zonefiles</h3>

<p>NSD uses BIND zonefiles, and there is a plethora of documentation and guides on how to write one, so hit up your favourite search engine and you&rsquo;ll be on your way. Don&rsquo;t forget to update the SOA Serial whenever you make a change, otherwise the next step won&rsquo;t work.</p>

<h3>Applying your configuration changes</h3>

<p>If you&rsquo;ve modified your <code>nsd.conf</code>, you&rsquo;ll need to restart NSD.</p>

<p><code>plain
$ sudo nsdc restart
</code></p>

<p>Otherwise, changes to zonefiles require the zone database to be rebuilt and reloaded.</p>

<p><code>plain
$ sudo nsdc rebuild
$ sudo nsdc reload
</code></p>

<p>If you have any slaves configured, be sure to check your logs for errors. If you don&rsquo;t set the server verbosity to 1 (incoming notifies/transfers) or 2 (soft warnings), and don&rsquo;t receive an error, it is likely working.</p>

<h2>Confirming your Master/Slave zones</h2>

<p>Dig is a wonderful tool when testing DNS changes. Check the forward and reverse zones of each of your nameservers, and make sure the serial and information matches. Then update the serial on your master, rebuild/reload, and check the slave again.</p>

<p><code>plain Check a Forward Zone
$ dig @ns2.ambrose.edu +nocmd mail.ambrose.edu any +multiline +noall +answer
mail.ambrose.edu.       10800 IN A 66.244.237.42
</code></p>

<p>``` plain Check a Reverse Zone
$ dig @ns2.ambrose.edu +nocmd 237.244.66.in-addr.arpa. any +multiline +noall +answer
237.244.66.in-addr.arpa. 10800 IN SOA ns1.ambrose.edu. helpdesk.ambrose.edu. (</p>

<pre><code>                            2013071201 ; serial
                            604800     ; refresh (1 week)
                            86400      ; retry (1 day)
                            2419200    ; expire (4 weeks)
                            604800     ; minimum (1 week)
                            )
</code></pre>

<p>237.244.66.in-addr.arpa. 10800 IN NS ns1.</p>

<p>$ dig @ns2.ambrose.edu +nocmd 42.237.244.66.in-addr.arpa. any +multiline +noall +answer
42.237.244.66.in-addr.arpa. 10800 IN PTR mail.ambrose.edu.
```</p>

<h2>Get a second opinion</h2>

<p>There are quite a few automated tests that will check the responses from your nameservers, and ensure everything is in working order. I found that <a href="http://dnscheck.pingdom.com/">Pingdom</a>, the <a href="http://dnscheck.iis.se/">Swedish Internet Infrastructure Foundation</a>, and <a href="http://www.intodns.com/">IntoDNS</a> were extremely helpful.</p>
]]></content>
  </entry>
  
</feed>
